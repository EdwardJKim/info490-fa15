If you enter the following statement into the Python interpreter 
[markdown]`x = "20"` 
[markdown]`int(x)*2`
what is printed to the screen? 
{=40.0 
~40 
~2020 
~int(x)*2 
~Error Message}



Which of the following is a built-in Python technique to convert a string (“1”) to an integer (1)? {=int(“1”) ~type(“1”) ~convert(“1”, integer) ~“1” ~str(“1”)}



In Python, everything in your Python program is {=an object ~a function ~a data structure ~a class ~a token}



What will you do if you want to execute the code repeatedly as long as x<5
{=while x<5: <some code>
~if x<5: <some code>
~for x<5: <some code>
~elif x<5 <some code>
~def x<5: <some code>}



For the following function 
def mystery(a, b, c):
    return a**2+b**2==c**2 
What will mystery(3,4,5) return?
{=True ~False ~25 ~9 ~16}



For the following program, will `fac(5)` output **120**?
  def fac(x):
    if x > 0: return x*fac(x-1)
    else: return 1

{~False =True}



What Python command is the best way to iterate through a list, element by element? {=for ~while ~iterate ~do ~use a custom function}



In order to ensure that a function is defined before its first use, you have to know the order in which statements are executed, which is called the
{=flow of execution ~flow of flour ~flow of water ~flow of homework ~flow of statements}



Recursion is:
{~ one function to call another =a function to call itself ~call another program when a Python program that secretly jeopardizes user's security information}

How to jump out of a loop (for-loop or while-loop)?
{=break ~continue ~jump ~jumpOutOfTheLoop ~goto}

[markdown]What is value of _x_ after the following operation?
x=1
y=2 
x=y
{=2 ~1 ~"y" ~int ~"x"}

With what phrase do you define a new function in python?
{=def ~definition ~define ~function ~None of the above}

What is encapsulation?
{=The process of transforming a sequence of statements into a function definition 
~The process of replacing something unnecessarily specific with something appropriately general
~A waste of time
~A string at the beginning of a function that explains what the function does
}

When you create a variable inside a function, it can be accessed:
{=inside the function ~inside the function and functions declared after ~every function except "__main__"}

What command displays a user's identity in Unix-like systems?
{=id ~identify ~ident ~su ~sudo}

What will happen if you issue the the command "top" to a Unix-like system?
{=Tasks will be displayed
~Active jobs will be listed
~It will show you the top of a single given process
~A snapshot of current processes will be displayed
~A signal will be sent to a process
}

When considering the file mode in Unix-like systems, what would an R represent?
{=Allows a file to be opened and read 
~Allows a file to be written to but not renamed or deleted
~Allows a file to be executed
~None of the above
}

What does "sudo" mean in Unix-like systems?
{=Execute a command as another user
~Please
~Run a shell as another user
~Change a file's owner
~Pretty please
}

What do void functions do?
{=Perform an action but not a value
~Return a value given an input
~Return nothing
~None of the above
}

What would be the returned value of the following function if n = 6?
def fibonacci (n):
	if n == 0:
		return 0
	elif n == 1:
		return 1
	else:
		return fibonacci(n-1) + fibonacci(n-2)
{=8
~6
~3
~13
~7
}

